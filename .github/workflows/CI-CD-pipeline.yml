name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
    
jobs:
  continuous-integration:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python all python version
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
          architecture: x64

      - name: Install Python Virtual ENV
        run: pip3 install virtualenv

      - name:  Setup Virtual env
        uses: actions/cache@v2
        id: cache-venv
        with:
          path: venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-
      - name: Activate and Install Depencies into Virtual env
        run: python -m venv venv && source venv/bin/activate &&
          pip3 install -r requirements.txt
        if: steps.cache-venv.outputs.cache-hit != 'true'

      - name: Check File List
        run: ls

      # Install all the app dependencies
      - name: Install dependencies
        run: pip3 install -r requirements.txt

      # Build the app and run tests
      - name: Build and Run Test
        run: pytest

  continuous-deployment:
    runs-on: ubuntu-latest
    #needs: [continuous-integration]
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 1
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Check out code
        uses: actions/checkout@v2
    
      - name: Create docker images
        run: docker build -t 107164280007.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/omer-test:latest .

      - name: Upload docker into ECR
        run: docker push 107164280007.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/omer-test:latest

      - name: Update lambda image
        run: aws lambda update-function-code --function-name omer-s3-lambda --image-uri 107164280007.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/omer-test:latest
        
      # - name: AWS Lambda Deploy
      #   if: github.ref == 'refs/heads/master'
      #   uses: appleboy/lambda-action@master
      #   with:
      #     aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws_region: ${{ secrets.AWS_REGION }}
      #     function_name: omer-s3-lambda
      #     image_uri: 107164280007.dkr.ecr.eu-west-1.amazonaws.com/omer-test:test
      #     dry_run: true
     
